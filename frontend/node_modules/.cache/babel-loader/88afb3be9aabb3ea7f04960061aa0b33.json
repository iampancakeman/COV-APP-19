{"ast":null,"code":"var _jsxFileName = \"/home/peter/334/fullstack/frontend/src/pages/generalPages/signUpPages/index.jsx\",\n    _s = $RefreshSig$();\n\n//Material UI\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Typography } from \"@material-ui/core\"; //Customer Component\n\nimport { TextField } from \"../../../components/InputFields/TextField\";\nimport { PasswordField } from \"../../../components/InputFields/Password\"; //React\n\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\"; //Redux\n\nimport { useDispatch } from \"react-redux\";\nimport { logUserInSuccess } from '../../../redux/login/actions'; //Validation\n\nimport { textFieldValidation, emailValidation, passwordValidation, phoneNumberValidation } from '../../../components/InputFields/Validation'; //Endpoint APIs\n\nimport Axios from \"axios\";\nimport { registerUserApiUrl } from \"../../../constants/apiURL\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst actionDispatch = dispatch => ({\n  logUserInSuccess: users => dispatch(logUserInSuccess(users))\n});\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: \"flex\",\n    flexDirection: 'column',\n    width: '70%',\n    margin: 'auto'\n  },\n  heading: {\n    margin: 'auto',\n    display: \"flex\",\n    flexDirection: 'column',\n    [theme.breakpoints.down('sm')]: {\n      width: '100%'\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '40%'\n    }\n  },\n  logoWrapper: {\n    margin: '0 auto',\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n      paddingBottom: '5%'\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '30%',\n      paddingBottom: '2%'\n    }\n  },\n  textFieldWrapper: {\n    margin: 'auto',\n    display: \"flex\",\n    flexDirection: 'column',\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n      paddingBottom: '5%'\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '40%',\n      paddingBottom: '2%'\n    }\n  },\n  buttonWrapper: {\n    display: \"flex\",\n    flexDirection: 'column',\n    margin: 'auto',\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n      paddingBottom: '3%'\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '40%',\n      paddingBottom: '1%'\n    }\n  },\n  button: {\n    fontSize: '1.4em'\n  },\n  errorText: {\n    color: 'red',\n    padding: 0,\n    margin: 0\n  }\n}));\nexport const SignUpPage = props => {\n  _s();\n\n  const {\n    logUserInSuccess\n  } = actionDispatch(useDispatch());\n  const classes = useStyles();\n  const history = useHistory(); //local state\n\n  const [firstName, setFirstName] = useState('');\n  const [firstNameError, setFirstNameError] = useState(false);\n  const [lastName, setLastName] = useState('');\n  const [lastNameError, setLastNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [password, setPassword] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [passwordErrorMessage, setPasswordErrorMessage] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [confirmPasswordError, setConfirmPasswordError] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [phoneNumberError, setPhoneNumberError] = useState(false); //Updates values in state\n\n  const setFirstNameValue = event => {\n    setFirstName(event.target.value);\n    validateFirstName(event.target.value);\n  };\n\n  const setLastNameValue = event => {\n    setLastName(event.target.value);\n    validateLastName(event.target.value);\n  };\n\n  const setEmailValue = event => {\n    setEmail(event.target.value);\n    validateEmail(event.target.value);\n  };\n\n  const setPasswordValue = event => {\n    setPassword(event.target.value);\n    validatePassword(event.target.value);\n  };\n\n  const setConfirmPasswordValue = event => {\n    setConfirmPassword(event.target.value);\n    validateConfirmPassword(event.target.value);\n  };\n\n  const setPhoneNumberValue = event => {\n    setPhoneNumber(event.target.value);\n    validatePhoneNumber(event.target.value);\n  }; //validate fields\n\n\n  const validateFirstName = (item = firstName) => {\n    textFieldValidation(item) ? setFirstNameError(false) : setFirstNameError(true);\n  };\n\n  const validateLastName = (item = lastName) => {\n    textFieldValidation(item) ? setLastNameError(false) : setLastNameError(true);\n  };\n\n  const validateEmail = (item = email) => {\n    emailValidation(item) ? setEmailError(false) : setEmailError(true);\n  };\n\n  const validatePassword = (item = password) => {\n    const passwordValidationResult = passwordValidation(item);\n\n    if (!passwordValidationResult.valid) {\n      setPasswordError(true);\n      setPasswordErrorMessage(passwordValidationResult.message);\n    } else {\n      setPasswordError(false);\n    }\n\n    item !== confirmPassword ? setConfirmPasswordError(true) : setConfirmPasswordError(false);\n  };\n\n  const validateConfirmPassword = (item = confirmPassword) => {\n    item !== password ? setConfirmPasswordError(true) : setConfirmPasswordError(false);\n  };\n\n  const validatePhoneNumber = (item = phoneNumber) => {\n    phoneNumberValidation(item) ? setPhoneNumberError(false) : setPhoneNumberError(true);\n  }; //handle clicking the icon to show/hide password/confirmPassword\n\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleClickShowConfirmPassword = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  }; //perform checking on input fields, send to backend, and confirm account creation\n\n\n  const handleSubmitButtonClick = event => {\n    //check if any value are still empty\n    if (firstName === \"\" || lastName === \"\" || email === \"\" || password === \"\" || confirmPassword === \"\" || setPhoneNumber === \"\") {\n      //don't submit && set fields to error state if empty\n      runValidateAllValues(); //check if any value is invalid    \n    } else if (firstNameError || lastNameError || emailError || passwordError || confirmPasswordError || phoneNumberError) {//don't submit\n    } else {\n      //all good to submit\n      createAccountProcess();\n    }\n  };\n\n  const runValidateAllValues = () => {\n    validateFirstName();\n    validateLastName();\n    validateEmail();\n    validatePassword();\n    validateConfirmPassword();\n    validatePhoneNumber();\n  };\n\n  const createAccountProcess = async () => {\n    try {\n      const response = await Axios({\n        method: 'post',\n        url: registerUserApiUrl,\n        data: {\n          firstName: firstName,\n          lastName: lastName,\n          email: email,\n          phoneNumber: phoneNumber,\n          password: password\n        }\n      }); //auto log user in if register user api result was successful\n\n      logUserInSuccess({\n        firstName: response.user.first_name,\n        lastName: response.user.last_name,\n        email: response.user.email,\n        accessToken: `token ${response.token}`\n      });\n      history.push(\"/account-creation-confirmation\");\n    } catch (err) {//error occured -> could not login\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.heading,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        component: \"h2\",\n        gutterBottom: true,\n        align: \"left\",\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"firstName\",\n      label: \"First Name\",\n      value: firstName,\n      onChangeHandler: setFirstNameValue,\n      errorValue: firstNameError,\n      errorMessage: \"First Name field can not be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"lastName\",\n      label: \"Last Name\",\n      value: lastName,\n      onChangeHandler: setLastNameValue,\n      errorValue: lastNameError,\n      errorMessage: \"Last Name field can not be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"email\",\n      label: \"Email\",\n      value: email,\n      onChangeHandler: setEmailValue,\n      errorValue: emailError,\n      errorMessage: \"Please enter a valid email address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PasswordField, {\n      id: \"password\",\n      label: \"Password\",\n      value: password,\n      onChangeHandler: setPasswordValue,\n      errorValue: passwordError,\n      errorMessage: passwordErrorMessage,\n      showPassword: showPassword,\n      handleClickShowPassword: handleClickShowPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PasswordField, {\n      id: \"confirmPassword\",\n      label: \"Confirm Password\",\n      value: confirmPassword,\n      onChangeHandler: setConfirmPasswordValue,\n      errorValue: confirmPasswordError,\n      errorMessage: \"Password does not match\",\n      showPassword: showConfirmPassword,\n      handleClickShowPassword: handleClickShowConfirmPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"phoneNumber\",\n      label: \"Phone Number\",\n      value: phoneNumber,\n      onChangeHandler: setPhoneNumberValue,\n      errorValue: phoneNumberError,\n      errorMessage: \"Please enter a valid phone number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonWrapper,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: () => handleSubmitButtonClick(),\n        className: classes.button,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SignUpPage, \"yrSyBLEJd+2dXzZMeb9dudExSGo=\", false, function () {\n  return [useDispatch, useStyles, useHistory];\n});\n\n_c = SignUpPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpPage\");","map":{"version":3,"sources":["/home/peter/334/fullstack/frontend/src/pages/generalPages/signUpPages/index.jsx"],"names":["makeStyles","Button","Typography","TextField","PasswordField","useState","useHistory","useDispatch","logUserInSuccess","textFieldValidation","emailValidation","passwordValidation","phoneNumberValidation","Axios","registerUserApiUrl","actionDispatch","dispatch","users","useStyles","theme","container","display","flexDirection","width","margin","heading","breakpoints","down","up","logoWrapper","paddingBottom","textFieldWrapper","buttonWrapper","button","fontSize","errorText","color","padding","SignUpPage","props","classes","history","firstName","setFirstName","firstNameError","setFirstNameError","lastName","setLastName","lastNameError","setLastNameError","email","setEmail","emailError","setEmailError","password","setPassword","passwordError","setPasswordError","showPassword","setShowPassword","passwordErrorMessage","setPasswordErrorMessage","confirmPassword","setConfirmPassword","confirmPasswordError","setConfirmPasswordError","showConfirmPassword","setShowConfirmPassword","phoneNumber","setPhoneNumber","phoneNumberError","setPhoneNumberError","setFirstNameValue","event","target","value","validateFirstName","setLastNameValue","validateLastName","setEmailValue","validateEmail","setPasswordValue","validatePassword","setConfirmPasswordValue","validateConfirmPassword","setPhoneNumberValue","validatePhoneNumber","item","passwordValidationResult","valid","message","handleClickShowPassword","handleClickShowConfirmPassword","handleSubmitButtonClick","runValidateAllValues","createAccountProcess","response","method","url","data","user","first_name","last_name","accessToken","token","push","err"],"mappings":"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","sourcesContent":["//Material UI\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Typography } from \"@material-ui/core\";\n\n//Customer Component\nimport { TextField } from \"../../../components/InputFields/TextField\";\nimport { PasswordField } from \"../../../components/InputFields/Password\";\n\n//React\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\n//Redux\nimport { useDispatch } from \"react-redux\";\nimport { logUserInSuccess } from '../../../redux/login/actions'\n\n//Validation\nimport { textFieldValidation, emailValidation, passwordValidation, phoneNumberValidation } from '../../../components/InputFields/Validation'\n\n//Endpoint APIs\nimport Axios from \"axios\";\nimport { registerUserApiUrl } from \"../../../constants/apiURL\";\n\nconst actionDispatch = (dispatch) => ({\n    logUserInSuccess: (users) => dispatch(logUserInSuccess(users)),\n});\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: \"flex\",\n        flexDirection: 'column',\n        width: '70%',\n        margin: 'auto',\n    },\n    heading: {\n        margin: 'auto',\n        display: \"flex\",\n        flexDirection: 'column',\n\n        [theme.breakpoints.down('sm')]: {\n            width: '100%',\n        },\n        [theme.breakpoints.up('md')]: {\n            width: '40%',\n        },\n    },\n    logoWrapper: {\n        margin: '0 auto',\n\n        [theme.breakpoints.down('sm')]: {\n            width: '100%',\n            paddingBottom: '5%',\n        },\n        [theme.breakpoints.up('md')]: {\n            width: '30%',\n            paddingBottom: '2%',\n        },\n    },\n    textFieldWrapper: {\n        margin: 'auto',\n        display: \"flex\",\n        flexDirection: 'column',\n\n\n        [theme.breakpoints.down('sm')]: {\n            width: '100%',\n            paddingBottom: '5%',\n        },\n        [theme.breakpoints.up('md')]: {\n            width: '40%',\n            paddingBottom: '2%',\n        }\n    },\n    buttonWrapper: {\n        display: \"flex\",\n        flexDirection: 'column',\n        margin: 'auto',\n\n        [theme.breakpoints.down('sm')]: {\n            width: '100%',\n            paddingBottom: '3%',\n        },\n        [theme.breakpoints.up('md')]: {\n            width: '40%',\n            paddingBottom: '1%',\n        }\n    },\n    button: {\n        fontSize: '1.4em'\n    },\n    errorText: {\n        color: 'red',\n        padding: 0,\n        margin: 0\n    }\n}));\n\nexport const SignUpPage = (props) => {\n    const { logUserInSuccess } = actionDispatch(useDispatch());\n    const classes = useStyles();\n    const history = useHistory();\n\n    //local state\n    const [firstName, setFirstName] = useState('');\n    const [firstNameError, setFirstNameError] = useState(false);\n\n    const [lastName, setLastName] = useState('');\n    const [lastNameError, setLastNameError] = useState(false);\n\n    const [email, setEmail] = useState('');\n    const [emailError, setEmailError] = useState(false);\n\n    const [password, setPassword] = useState('');\n    const [passwordError, setPasswordError] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n    const [passwordErrorMessage, setPasswordErrorMessage] = useState('');\n\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [confirmPasswordError, setConfirmPasswordError] = useState(false);\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [phoneNumberError, setPhoneNumberError] = useState(false);\n\n    //Updates values in state\n    const setFirstNameValue = (event) => {\n        setFirstName(event.target.value);\n        validateFirstName(event.target.value);\n    }\n    const setLastNameValue = (event) => {\n        setLastName(event.target.value);\n        validateLastName(event.target.value);\n    }\n    const setEmailValue = (event) => {\n        setEmail(event.target.value);\n        validateEmail(event.target.value);        \n    }\n    const setPasswordValue = (event) => {\n        setPassword(event.target.value);\n        validatePassword(event.target.value);\n    }\n    const setConfirmPasswordValue = (event) => {\n        setConfirmPassword(event.target.value);\n        validateConfirmPassword(event.target.value);\n    }\n    const setPhoneNumberValue = (event) => {\n        setPhoneNumber(event.target.value);\n        validatePhoneNumber(event.target.value);\n    }\n\n    //validate fields\n    const validateFirstName = (item = firstName) => {\n        textFieldValidation(item) ? setFirstNameError(false) : setFirstNameError(true);\n    }\n    const validateLastName = (item = lastName) => {\n        textFieldValidation(item) ? setLastNameError(false) : setLastNameError(true);\n    }\n    const validateEmail = (item = email) => {\n        emailValidation(item) ? setEmailError(false) : setEmailError(true);\n    }\n    const validatePassword = (item = password) => {\n        const passwordValidationResult = passwordValidation(item);\n        if(!passwordValidationResult.valid){\n            setPasswordError(true);\n            setPasswordErrorMessage(passwordValidationResult.message);\n        }else{\n            setPasswordError(false);\n        }\n        item !== confirmPassword ? setConfirmPasswordError(true) : setConfirmPasswordError(false);\n    }\n    const validateConfirmPassword = (item = confirmPassword) => {\n        item !== password ? setConfirmPasswordError(true) : setConfirmPasswordError(false);\n    }\n    const validatePhoneNumber = (item = phoneNumber) => {\n        phoneNumberValidation(item) ? setPhoneNumberError(false) : setPhoneNumberError(true);\n    }\n\n    //handle clicking the icon to show/hide password/confirmPassword\n    const handleClickShowPassword = () => {\n        setShowPassword(!showPassword);\n    };\n    const handleClickShowConfirmPassword = () => {\n        setShowConfirmPassword(!showConfirmPassword);\n    };\n\n    //perform checking on input fields, send to backend, and confirm account creation\n    const handleSubmitButtonClick = (event) => {\n        //check if any value are still empty\n        if(firstName === \"\" || lastName === \"\" || email === \"\" || password === \"\" || confirmPassword === \"\" || setPhoneNumber === \"\"){\n            //don't submit && set fields to error state if empty\n            runValidateAllValues();\n\n        //check if any value is invalid    \n        }else if(firstNameError || lastNameError || emailError || passwordError || confirmPasswordError || phoneNumberError){\n            //don't submit\n        }else{\n            //all good to submit\n            createAccountProcess();\n        }\n    };\n\n    const runValidateAllValues = () => {\n        validateFirstName();\n        validateLastName();\n        validateEmail();\n        validatePassword();\n        validateConfirmPassword();\n        validatePhoneNumber();\n    };\n\n    const createAccountProcess = async () => {\n        try {\n            const response = await Axios({\n                method: 'post',\n                url: registerUserApiUrl,\n                data: {\n                    firstName: firstName,\n                    lastName: lastName,\n                    email: email,\n                    phoneNumber: phoneNumber,\n                    password: password,\n                }\n            });\n\n            //auto log user in if register user api result was successful\n            logUserInSuccess({\n                firstName: response.user.first_name,\n                lastName: response.user.last_name,\n                email: response.user.email,\n                accessToken: `token ${response.token}`,\n            });\n\n            history.push(\"/account-creation-confirmation\");\n        } catch (err) {\n            //error occured -> could not login\n            \n        }\n    };\n\n    return (\n        <div className={classes.container}>\n            {/* Creat Account Heading */}\n            <div className={classes.heading}>\n                <Typography variant=\"h2\" component=\"h2\" gutterBottom align=\"left\">\n                    Create Account\n                </Typography>\n            </div>\n            \n            {/* First Name */}\n            <TextField id=\"firstName\" \n                label=\"First Name\" value={firstName} onChangeHandler={setFirstNameValue}\n                errorValue={firstNameError} errorMessage=\"First Name field can not be empty\" />\n\n            {/* lastName */}\n            <TextField id=\"lastName\" \n                label=\"Last Name\" value={lastName} onChangeHandler={setLastNameValue}\n                errorValue={lastNameError} errorMessage=\"Last Name field can not be empty\" />\n            \n            {/* Email */}\n            <TextField id=\"email\" \n                label=\"Email\" value={email} onChangeHandler={setEmailValue}\n                errorValue={emailError} errorMessage=\"Please enter a valid email address\" />\n\n            {/* Password */}\n            <PasswordField id=\"password\"\n                label=\"Password\" value={password} onChangeHandler={setPasswordValue}\n                errorValue={passwordError} errorMessage={passwordErrorMessage}\n                showPassword={showPassword} handleClickShowPassword={handleClickShowPassword}\n            />\n\n            {/* Confirm Password */}\n            <PasswordField id=\"confirmPassword\"\n                label=\"Confirm Password\" value={confirmPassword} onChangeHandler={setConfirmPasswordValue}\n                errorValue={confirmPasswordError} errorMessage=\"Password does not match\"\n                showPassword={showConfirmPassword} handleClickShowPassword={handleClickShowConfirmPassword}\n            />\n\n            {/* Phone Number */}\n            <TextField id=\"phoneNumber\" \n                label=\"Phone Number\" value={phoneNumber} onChangeHandler={setPhoneNumberValue}\n                errorValue={phoneNumberError} errorMessage=\"Please enter a valid phone number\" />\n\n            {/* Next Button */}\n            <div className={classes.buttonWrapper}>\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => handleSubmitButtonClick() } className={classes.button}>\n                    Submit\n                </Button>\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}